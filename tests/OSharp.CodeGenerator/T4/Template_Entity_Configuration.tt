<#+
// <copyright file="Template_Entity_Configuration.tt" company="">
//  Copyright © . All Rights Reserved.
// </copyright>

public class EntityConfigurationTemplate : CSharpTemplate
{
        private readonly TypeMetadata _entity;
        private readonly string _entityName;
        private readonly string _lowerEntityName;
        private readonly string _moduleName = null;
        private readonly PropertyMetadata _key;

        public EntityConfigurationTemplate(TypeMetadata entity, string modulePattern)
        {
            _entityName = entity.Name;
            _lowerEntityName = entity.Name.UpperToLowerAndSplit();
            _entity = entity;
            _key = entity.PropertyMetadatas.First(m => m.Name == "Id");
            if(modulePattern != null)
            {
                _moduleName = entity.Namespace.Match(modulePattern);
                switch(entity.FullName)
                {
                    case "OSharp.Core.Functions.Function":
                    case "OSharp.Core.EntityInfos.EntityInfo":
                        _moduleName = "Security";
                        break;
                    case "OSharp.System.KeyValueCouple":
                        _moduleName = "System";
                        break;
                }
            }
        }

        public string FileName
        {
            get
            {
                return string.IsNullOrEmpty(_moduleName)
                    ? string.Format("{0}Configuration.generated.cs", _entityName)
                    : string.Format("{0}\\{1}Configuration.generated.cs", _moduleName, _entityName);
            }
        }

        public string ProjectName { get; set; }

	    public override string TransformText()
	    {
		    base.TransformText();
#>
// -----------------------------------------------------------------------
//  <copyright file="<#=_entityName #>Configuration.cs" company="OSharp开源团队">
//      Copyright (c) 2014-<#=DateTime.Now.Year #> OSharp. All rights reserved.
//  </copyright>
//  <site>http://www.osharp.org</site>
//  <last-editor>郭明锋</last-editor>
//  <last-date><#=DateTime.Now.ToString("yyyy-MM-dd HH:mm") #></last-date>
// -----------------------------------------------------------------------

using System;

using <#=(string.IsNullOrEmpty(ProjectName) ? "Liuliu.Demo" : ProjectName)#><#=(string.IsNullOrEmpty(_moduleName) ? "" : "."+_moduleName) #>.Entities;

using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

using OSharp.Entity;


namespace <#=(string.IsNullOrEmpty(ProjectName) ? "Liuliu.Demo" : ProjectName)#>.EntityConfiguration<#=(string.IsNullOrEmpty(_moduleName) ? "" : "."+_moduleName) #>
{
    public partial class <#=_entityName #>Configuration : EntityTypeConfigurationBase<<#=_entityName #>, <#=GetSingleTypeName(_key.TypeName) #>>
    {
        /// <summary>
        /// 重写以实现实体类型各个属性的数据库配置
        /// </summary>
        /// <param name="builder">实体类型创建器</param>
        public override void Configure(EntityTypeBuilder<<#=_entityName #>> builder)
        {
            
        }
    }
}
<#+
            return this.GenerationEnvironment.ToString();
	    }

        
        private static string GetSingleTypeName(string typeName)
        {
            switch(typeName)
            {
                case "System.Int32":
                    return "int";
                case "System.Long":
                    return "long";
                case "System.String":
                    return "string";                    
                case "System.Guid":
                    return "Guid";
                case "System.Boolean":
                    return "bool";
                case "System.DateTime":
                    return "DateTime";
                default:
                    return "string";
            }
        }
}
#>
